# Generated by Django 4.2.9 on 2024-01-15 15:49

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Team",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                ("fullname", models.CharField(max_length=255)),
                ("phone", models.CharField(max_length=15)),
                ("points", models.IntegerField(default=0)),
                (
                    "timeRequired",
                    models.FloatField(default=0, verbose_name="Time required"),
                ),
                (
                    "lastSubmission",
                    models.DateTimeField(
                        default=django.utils.timezone.localtime,
                        verbose_name="Last submission",
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Machines",
            fields=[
                (
                    "machineId",
                    models.AutoField(
                        primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("machineTitle", models.CharField(max_length=20, verbose_name="Name")),
                (
                    "machineIp",
                    models.CharField(max_length=20, verbose_name="IP Address"),
                ),
                (
                    "machinePoints",
                    models.IntegerField(default=0, verbose_name="Points"),
                ),
                (
                    "machineSolvers",
                    models.IntegerField(default=0, verbose_name="Solvers"),
                ),
                (
                    "enumeration",
                    models.IntegerField(
                        blank=True,
                        choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)],
                        verbose_name="Enumeration rating",
                    ),
                ),
                (
                    "ctf_like",
                    models.IntegerField(
                        blank=True,
                        choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)],
                        verbose_name="CTF-Like rating",
                    ),
                ),
                (
                    "custom_exploitation",
                    models.IntegerField(
                        blank=True,
                        choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)],
                        verbose_name="Custom exploitation Rating",
                    ),
                ),
                (
                    "real_life",
                    models.IntegerField(
                        blank=True,
                        choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)],
                        verbose_name="Real-life rating",
                    ),
                ),
                (
                    "cve",
                    models.IntegerField(
                        blank=True,
                        choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)],
                        verbose_name="CVE rating",
                    ),
                ),
                (
                    "easyRating",
                    models.IntegerField(default=0, verbose_name="Easy raters"),
                ),
                (
                    "mediumRating",
                    models.IntegerField(default=0, verbose_name="Medium raters"),
                ),
                (
                    "hardRating",
                    models.IntegerField(default=0, verbose_name="Hard raters"),
                ),
                (
                    "userFlag",
                    models.CharField(default="lakshya_CTF{hack_me_now}", max_length=50),
                ),
                (
                    "rootFlag",
                    models.CharField(default="lakshya_CTF{hack_me_now}", max_length=50),
                ),
            ],
            options={
                "verbose_name": "Machine",
                "verbose_name_plural": "Machines",
            },
        ),
        migrations.CreateModel(
            name="Questions",
            fields=[
                (
                    "questionId",
                    models.AutoField(
                        primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("questionDescription", models.TextField(verbose_name="Description")),
                (
                    "questionTitle",
                    models.CharField(
                        default="Lakshya", max_length=40, verbose_name="Title"
                    ),
                ),
                (
                    "questionPoints",
                    models.IntegerField(default=0, verbose_name="Points"),
                ),
                (
                    "questionData",
                    models.FileField(blank=True, upload_to="", verbose_name="Data"),
                ),
                (
                    "questionFlag",
                    models.CharField(default="lakshya_CTF{hack_me_now}", max_length=50),
                ),
                (
                    "questionHint",
                    models.TextField(default="Sample hint", verbose_name="Hint"),
                ),
                (
                    "questionSolvers",
                    models.IntegerField(default=0, verbose_name="Solvers"),
                ),
                (
                    "questionType",
                    models.CharField(
                        choices=[
                            ("web", "Web"),
                            ("reversing", "Reversing"),
                            ("steg", "Steganography"),
                            ("foren", "Forensics"),
                            ("crypt", "Cryptography"),
                            ("misc", "Miscellaneous"),
                        ],
                        default="web",
                        max_length=15,
                        verbose_name="Category",
                    ),
                ),
                (
                    "easyRating",
                    models.IntegerField(default=0, verbose_name="Easy raters"),
                ),
                (
                    "mediumRating",
                    models.IntegerField(default=0, verbose_name="Medium raters"),
                ),
                (
                    "hardRating",
                    models.IntegerField(default=0, verbose_name="Hard raters"),
                ),
            ],
            options={
                "verbose_name": "Question",
                "verbose_name_plural": "Questions",
            },
        ),
        migrations.CreateModel(
            name="TakenQuestionHint",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("hint", models.BooleanField(default=False)),
                (
                    "question",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="app.questions"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SolvedTimestamps",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "timestamp_record",
                    models.DateTimeField(default=django.utils.timezone.localtime),
                ),
                ("points", models.IntegerField(default=0)),
                (
                    "username",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SolvedQuestions",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "question",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="app.questions"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SolvedMachines",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("root", models.BooleanField(default=False)),
                (
                    "machine",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="app.machines"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
    ]
